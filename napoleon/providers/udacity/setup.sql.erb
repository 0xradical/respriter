-- auto-generated, do not change!
-- run `make build-seeds` instead

WITH

courses_template AS (
  INSERT INTO app.pipeline_templates (
    name,
    dataset_id,
    pipes
  ) SELECT
    'Udacity Courses Pipeline',
    '<%= dataset_id %>',
    '[
      {
        "type": "Fetcher",
        "http":{
          "headers": {
            "user_agent": "<%= user_agent %>"
          }
        },
        "script": {
          "type":        "ruby",
          "source_code": <%= courses_fetcher %>
        }
      },
      {
        "type":"ResourceValidator"
      },
      {
        "type":"ResourceCreator"
      }
    ]'
  RETURNING *
)

INSERT INTO app.pipeline_templates (
  name,
  data,
  bootstrap_script_type,
  bootstrap_script,
  success_script_type,
  success_script,
  dataset_id,
  pipes
) SELECT
  'Udacity Sitemap Pipeline',
  ('{"next_pipeline_template_id":"' || courses_template.id || '","sitemap_url":"<%= sitemap_url %>"' || ',"courses_api_url":"<%= courses_api_url %>"}')::jsonb,
  'sql',
  '
    WITH next_pipeline AS (
      INSERT INTO app.pipelines (
        pipeline_execution_id,
        pipeline_template_id
      ) VALUES (
        $1.pipeline_execution_id,
        ($1.data->>''next_pipeline_template_id'')::uuid
      )
      RETURNING *
    )

    UPDATE app.pipelines
    SET data = jsonb_set(pipelines.data, ''{next_pipeline_id}'', (''"'' || next_pipeline.id || ''"'')::jsonb)
    FROM next_pipeline
    WHERE pipelines.id = $1.id;

    INSERT INTO app.pipe_processes (pipeline_id, initial_accumulator) VALUES ($1.id, (''{"sitemap_url":"'' || ($1.data->>''sitemap_url'') || ''","courses_api_url":"'' || ($1.data->>''courses_api_url'') || ''"}'')::jsonb);
    SELECT app.pipeline_call($1.id);
  ',
  'sql',
  '
    DELETE FROM app.pipe_processes
    WHERE
    pipeline_id = ($1.data->>''next_pipeline_id'')::uuid AND
    EXISTS (
      SELECT 1
      FROM app.pipe_processes AS other
      WHERE
        other.pipeline_id                   = ($1.data->>''next_pipeline_id'')::uuid AND
        other.id                            > pipe_processes.id                      AND
        other.initial_accumulator->>''url'' = pipe_processes.initial_accumulator->>''url''
    );

    SELECT app.pipeline_call(($1.data->>''next_pipeline_id'')::uuid);
  ',
  '<%= dataset_id %>',
  '[
    {
      "type": "Fetcher",
      "http": {
        "headers": {
          "user_agent": "<%= user_agent %>"
        }
      },
      "script": {
        "type":        "ruby",
        "source_code": <%= sitemap_fetcher %>
      }
    },
    {
      "type": "Demux"
    }
  ]'
FROM courses_template;
