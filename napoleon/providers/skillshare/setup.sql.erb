-- auto-generated, do not change!
-- run `make build-seeds` instead

WITH

next_template AS (
  INSERT INTO app.pipeline_templates (
    name,
    dataset_id,
    pipes
  ) VALUES (
    'Skillshare Course Pipeline',
    '<%= dataset_id %>',
    '[
      {
        "type": "Fetcher",
        "http": {
          "proxy": {
            "uri":      "<%= proxy_host %>",
            "user":     "<%= proxy_user %>",
            "password": "<%= proxy_pass %>"
          },
          "headers": { "user_agent": "<%= user_agent %>" }
        },
        "status_map": [
          [ [ 200, 299 ], "pending" ],
          [ 400,          "skipped" ],
          [ [ 403, 404 ], "skipped" ],
          [ 500,          "skipped" ]
        ],
        "script": {
          "type":        "ruby",
          "source_code": <%= course_fetcher %>
        }
      },
      {
        "type": "Fetcher",
        "http": {
          "headers": {
            "user_agent": "<%= user_agent %>",
            "accept":     "application/json;pk=BCpkADawqM2OOcM6njnM7hf9EaK6lIFlqiXB0iWjqGWUQjU7R8965xUvIQNqdQbnDTLz0IAO7E6Ir2rIbXJtFdzrGtitoee0n1XXRliD-RH9A-svuvNW9qgo3Bh34HEZjXjG4Nml4iyz3KqF",
            "origin":     "https://www.skillshare.com"
          },
          "follow_redirects": false
        },
        "status_map": [
          [ [ 200, 299 ], "pending" ],
          [ [ 400, 404 ], "pending" ],
          [ 500, "pending" ]
        ],
        "script": {
          "type":        "ruby",
          "source_code": <%= course_video_fetcher %>
        }
      },
      { "type": "ResourceCreator" }
    ]'
  )
  RETURNING *
)

INSERT INTO app.pipeline_templates (
  name,
  data,
  bootstrap_script_type,
  bootstrap_script,
  success_script_type,
  success_script,
  dataset_id,
  pipes
) SELECT
  'Skillshare Sitemap Pipeline',
  ('{"next_pipeline_template_id":"' || next_template.id || '","sitemap_url":"<%= sitemap_url %>","pricing_url":"<%= pricing_url %>"}')::jsonb,
  'sql',
  '
    WITH next_pipeline AS (
      INSERT INTO app.pipelines (
        pipeline_execution_id,
        pipeline_template_id
      ) VALUES (
        $1.pipeline_execution_id,
        ($1.data->>''next_pipeline_template_id'')::uuid
      )
      RETURNING *
    )

    UPDATE app.pipelines
    SET data = jsonb_set(pipelines.data, ''{next_pipeline_id}'', (''"'' || next_pipeline.id || ''"'')::jsonb)
    FROM next_pipeline
    WHERE pipelines.id = $1.id;

    INSERT INTO app.pipe_processes (pipeline_id, initial_accumulator) VALUES ($1.id, (''{"url":"'' || ($1.data->>''pricing_url'') || ''"}'')::jsonb);
    SELECT pipeline_call($1.id);
  ',
  'sql',
  'SELECT pipeline_call(($1.data->>''next_pipeline_id'')::uuid);',
  '<%= dataset_id %>',
  '[
    {
      "type": "Fetcher",
      "http": {
        "headers": { "user_agent": "<%= user_agent %>" }
      },
      "script": {
        "type":        "ruby",
        "source_code": <%= sitemap_price_fetcher %>
      }
    },
    {
      "type": "Fetcher",
      "http": {
        "headers": { "user_agent": "<%= user_agent %>" }
      },
      "script": {
        "type":        "ruby",
        "source_code": <%= sitemap_fetcher %>
      }
    },
    {
      "type": "Demux",
      "script": {
        "type":        "ruby",
        "source_code": <%= sitemap_demux %>
      }
    }
  ]'
FROM next_template;
