-- auto-generated, do not change!
-- run `make build-seeds` instead

WITH

resource_builder_template AS (
  INSERT INTO pipeline_templates (
    name,
    dataset_id,
    pipes
  ) VALUES (
    'KhanAcademy Resource Builder Pipeline',
    '<%= dataset_id %>',
    '
      [
        {
          "type": "ResourceCreator",
          "script": {
            "type": "ruby",
            "source_code": <%= resource_builder %>
          }
        }
      ]
    '
  )
  RETURNING *
),

chapter_template AS (
  INSERT INTO pipeline_templates (
    name,
    data,
    dataset_id,
    bootstrap_script_type,
    bootstrap_script,
    success_script_type,
    success_script,
    pipes
  ) SELECT
    'KhanAcademy Chapter Sitemap Pipeline',
    jsonb_build_object('next_pipeline_template_id', resource_builder_template.id::varchar),
    '<%= dataset_id %>',
    'sql',
    '
      WITH next_pipeline AS (
        INSERT INTO pipelines (
          label, pipeline_template_id
        ) VALUES (
          $1.label,
          ($1.data->>''next_pipeline_template_id'')::uuid
        )
        RETURNING *
      )

      UPDATE pipelines
      SET data = jsonb_set(pipelines.data, ''{next_pipeline_id}'', (''"'' || next_pipeline.id || ''"'')::jsonb)
      FROM next_pipeline
      WHERE pipelines.id = $1.id;
    ',
    'sql',
    '
      WITH

      cross_product AS (
        SELECT
          pipe_processes.*,
          sub_chapter.key   AS sub_chapter_key,
          sub_chapter.value AS sub_chapter_value
        FROM pipe_processes
        CROSS JOIN jsonb_each(data->''sub_chapters'') AS sub_chapter
        WHERE
          pipeline_id = $1.id AND status = ''succeeded''
        ORDER BY data->>''url'', sub_chapter.key ASC
      ),

      course_metadata AS (
        SELECT DISTINCT
          data->>''url''    AS url,
          data->>''type''   AS type,
          data->''json_ld'' AS json_ld,
          data->''sitemap'' AS sitemap
        FROM pipe_processes
        WHERE
          pipeline_id = $1.id AND status = ''succeeded''
      ),

      chapters AS (
        SELECT
          data->>''url'' AS url,
          jsonb_agg(jsonb_set(data->''chapter'', ''{sub_chapters}'', sub_chapter_value)) AS chapters
        FROM cross_product
        GROUP BY 1
      )

      INSERT INTO pipe_processes (
        status,
        pipeline_id,
        initial_accumulator
      ) SELECT
        ''pending'',
        ($1.data->>''next_pipeline_id'')::uuid,
        jsonb_build_object(
          ''url'', course_metadata.url,
          ''data'', jsonb_build_object(
            ''sitemap'',  course_metadata.sitemap,
            ''json_ld'',  course_metadata.json_ld,
            ''chapters'', chapters.chapters
          )
        )
      FROM course_metadata
      INNER JOIN chapters ON
        chapters.url = course_metadata.url;

      SELECT pipeline_call(($1.data->>''next_pipeline_id'')::uuid);
    ',
    '
      [
        {
          "type": "Fetcher",
          "script": {
            "type":        "ruby",
            "source_code": <%= chapter_fetcher %>
          }
        }
      ]
    '
  FROM resource_builder_template
  RETURNING *
),

course_sitemap_template AS (
  INSERT INTO pipeline_templates (
    name,
    data,
    dataset_id,
    bootstrap_script_type,
    bootstrap_script,
    success_script_type,
    success_script,
    pipes
  ) SELECT
    'KhanAcademy Course Sitemap Pipeline',
    jsonb_build_object('next_pipeline_template_id', chapter_template.id::varchar),
    '<%= dataset_id %>',
    'sql',
    '
      WITH next_pipeline AS (
        INSERT INTO pipelines (
          label, pipeline_template_id
        ) VALUES (
          $1.label,
          ($1.data->>''next_pipeline_template_id'')::uuid
        )
        RETURNING *
      )

      UPDATE pipelines
      SET data = jsonb_set(pipelines.data, ''{next_pipeline_id}'', (''"'' || next_pipeline.id || ''"'')::jsonb)
      FROM next_pipeline
      WHERE pipelines.id = $1.id;
    ',
    'sql',
    'SELECT pipeline_call(($1.data->>''next_pipeline_id'')::uuid);',
    '
      [
        {
          "type": "Fetcher",
          "script": {
            "type":        "ruby",
            "source_code": <%= course_sitemap_fetcher %>
          }
        },
        {
          "type": "Fetcher",
          "script": {
            "type":        "ruby",
            "source_code": <%= course_sitemap_course %>
          }
        },
        {
          "type": "Demux"
        }
      ]
    '
  FROM chapter_template
  RETURNING *
)

INSERT INTO pipeline_templates (
  name,
  data,
  bootstrap_script_type,
  bootstrap_script,
  success_script_type,
  success_script,
  dataset_id,
  pipes
) SELECT
  'KhanAcademy Main Sitemap Pipeline',
  ('{"next_pipeline_template_id":"' || course_sitemap_template.id || '","sitemap_url":"<%= sitemap_url %>"}')::jsonb,
  'sql',
  '
    WITH next_pipeline AS (
      INSERT INTO pipelines (
        label, pipeline_template_id
      ) VALUES (
        $1.label,
        ($1.data->>''next_pipeline_template_id'')::uuid
      )
      RETURNING *
    )

    UPDATE pipelines
    SET data = jsonb_set(pipelines.data, ''{next_pipeline_id}'', (''"'' || next_pipeline.id || ''"'')::jsonb)
    FROM next_pipeline
    WHERE pipelines.id = $1.id;

    INSERT INTO pipe_processes (pipeline_id, initial_accumulator) VALUES ($1.id, (''{"url":"'' || ($1.data->>''sitemap_url'') || ''"}'')::jsonb);

    SELECT pipeline_call($1.id);
  ',
  'sql',
  'SELECT pipeline_call(($1.data->>''next_pipeline_id'')::uuid);',
  '<%= dataset_id %>',
  '[
    {
      "type": "Fetcher"
    },
    {
      "type": "Demux",
      "script": {
        "type":        "ruby",
        "source_code": <%= main_sitemap_demux %>
      }
    }
  ]'
FROM course_sitemap_template;

UPDATE pipeline_templates AS last_template
SET
  schedule_pipeline_template_id = first_template.id,
  schedule_interval             = '1 weeks'
FROM pipeline_templates AS first_template
WHERE
  first_template.name = 'KhanAcademy Main Sitemap Pipeline' AND
  last_template.name  = 'KhanAcademy Resource Builder Pipeline';
