-- auto-generated, do not change!
-- run `make build-seeds` instead

WITH

courses_expirer_template AS (
  INSERT INTO app.pipeline_templates (
    name,
    dataset_id,
    pipes
  ) VALUES (
    'edX Courses Expirer Pipeline',
    '<%= dataset_id %>',
    '
      [
        {
          "type": "ResourceCreator",
          "script": {
            "type":        "ruby",
            "source_code": <%= courses_expirer %>
          }
        }
      ]
    '
  )
  RETURNING *
),

manual_courses_template AS (
  INSERT INTO app.pipeline_templates (
    name,
    success_script_type,
    success_script,
    dataset_id,
    pipes
  ) SELECT
    'edX Manual Courses Pipeline',
    'sql',
    'SELECT app.pipeline_call(($1.data->>''next_pipeline_id'')::uuid);',
    '<%= dataset_id %>',
    '
      [
        {
          "type": "Fetcher",
          "http": {
            "headers": {
              "user_agent": "<%= user_agent %>"
            }
          },
          "script": {
            "type":        "ruby",
            "source_code": <%= manual_courses_fetcher %>
          }
        },
        {
          "type": "Fetcher",
          "http": {
            "headers": {
              "user_agent": "<%= user_agent %>"
            }
          },
          "script": {
            "type":        "ruby",
            "source_code": <%= manual_courses_data_fetcher %>
          }
        },
        {
          "type": "ResourceValidator"
        },
        {
          "type": "ResourceCreator"
        }
      ]
    '
  FROM courses_expirer_template
  RETURNING *
),

api_courses_template AS (
  INSERT INTO app.pipeline_templates (
    name,
    success_script_type,
    success_script,
    dataset_id,
    pipes
  ) SELECT
    'edX API Courses Pipeline',
    'sql',
    'SELECT app.pipeline_call(($1.data->>''next_pipeline_id'')::uuid);',
    '<%= dataset_id %>',
    '
      [
        {
          "type": "Fetcher",
          "http": {
            "headers": {
              "user_agent": "<%= user_agent %>"
            }
          },
          "script": {
            "type":        "ruby",
            "source_code": <%= api_courses_parser %>
          }
        },
        {
          "type": "ResourceValidator"
        },
        {
          "type": "ResourceCreator"
        }
      ]
    '
  FROM manual_courses_template
  RETURNING *
),

courses_branching_template AS (
  INSERT INTO app.pipeline_templates (
    name,
    data,
    bootstrap_script_type,
    bootstrap_script,
    success_script_type,
    success_script,
    dataset_id,
    pipes
  ) SELECT
    'edX Courses Branching Pipeline',
    json_build_object(
      'api_courses_pipeline_template_id',     api_courses_template.id::varchar,
      'manual_courses_pipeline_template_id',  manual_courses_template.id::varchar,
      'courses_expirer_pipeline_template_id', courses_expirer_template.id::varchar
    ),
    'sql',
    '
      WITH courses_expirer_pipeline AS (
        INSERT INTO app.pipelines (
          pipeline_execution_id,
          pipeline_template_id
        ) VALUES (
          $1.pipeline_execution_id,
          ($1.data->>''courses_expirer_pipeline_template_id'')::uuid
        )
        RETURNING *
      ),

      manual_courses_pipeline AS (
        INSERT INTO app.pipelines (
          pipeline_execution_id,
          pipeline_template_id,
          data
        ) SELECT
          $1.pipeline_execution_id,
          ($1.data->>''manual_courses_pipeline_template_id'')::uuid,
          json_build_object(
            ''next_pipeline_id'', courses_expirer_pipeline.id::varchar
          )
        FROM courses_expirer_pipeline
        RETURNING *
      ),

      api_courses_pipeline AS (
        INSERT INTO app.pipelines (
          pipeline_execution_id,
          pipeline_template_id,
          data
        ) SELECT
          $1.pipeline_execution_id,
          ($1.data->>''api_courses_pipeline_template_id'')::uuid,
          json_build_object(
            ''next_pipeline_id'', manual_courses_pipeline.id::varchar
          )
        FROM manual_courses_pipeline
        RETURNING *
      )

      UPDATE app.pipelines
      SET data = json_build_object(
        ''api_courses_pipeline_id'',     api_courses_pipeline.id::varchar,
        ''manual_courses_pipeline_id'',  manual_courses_pipeline.id::varchar,
        ''courses_expirer_pipeline_id'', courses_expirer_pipeline.id::varchar
      )
      FROM courses_expirer_pipeline, manual_courses_pipeline, api_courses_pipeline
      WHERE pipelines.id = $1.id;
    ',
    'sql',
    'SELECT app.pipeline_call(($1.data->>''api_courses_pipeline_id'')::uuid);',
    '<%= dataset_id %>',
    '[
      {
        "type": "Fetcher",
        "http": {
          "follow_redirects": { "limit": 100 },
          "headers": {
            "user_agent": "<%= user_agent %>"
          }
        },
        "script": {
          "type":        "ruby",
          "source_code": <%= courses_brancher %>
        }
      }
    ]'
  FROM api_courses_template, manual_courses_template, courses_expirer_template
  RETURNING *
),

sitemap_template AS (
  INSERT INTO app.pipeline_templates (
    name,
    data,
    bootstrap_script_type,
    bootstrap_script,
    success_script_type,
    success_script,
    dataset_id,
    pipes
  ) SELECT
    'edX Sitemap Pipeline',
    ('{"next_pipeline_template_id":"' || courses_branching_template.id || '"}')::jsonb,
    'sql',
    '
      WITH next_pipeline AS (
        INSERT INTO app.pipelines (
          pipeline_execution_id,
          pipeline_template_id
        ) VALUES (
          $1.pipeline_execution_id,
          ($1.data->>''next_pipeline_template_id'')::uuid
        )
        RETURNING *
      )

      UPDATE app.pipelines
      SET data = jsonb_set(pipelines.data, ''{next_pipeline_id}'', (''"'' || next_pipeline.id || ''"'')::jsonb)
      FROM next_pipeline
      WHERE pipelines.id = $1.id;
    ',
    'sql',
    'SELECT app.pipeline_call(($1.data->>''next_pipeline_id'')::uuid);',
    '<%= dataset_id %>',
    '[
      {
        "type": "Fetcher",
        "http": {
          "headers": {
            "user_agent": "<%= user_agent %>"
          }
        },
        "script": {
          "type":        "ruby",
          "source_code": <%= sitemap_fetcher %>
        }
      },
      {
        "type": "Demux"
      }
    ]'
  FROM courses_branching_template
  RETURNING *
)

INSERT INTO app.pipeline_templates (
  name,
  data,
  bootstrap_script_type,
  bootstrap_script,
  success_script_type,
  success_script,
  dataset_id,
  pipes
) SELECT
  'edX Root Sitemap Pipeline',
  ('{"next_pipeline_template_id":"' || sitemap_template.id || '","root_sitemap_url":"<%= root_sitemap_url %>"}')::jsonb,
  'sql',
  '
    WITH next_pipeline AS (
      INSERT INTO app.pipelines (
        pipeline_execution_id,
        pipeline_template_id
      ) VALUES (
        $1.pipeline_execution_id,
        ($1.data->>''next_pipeline_template_id'')::uuid
      )
      RETURNING *
    )

    UPDATE app.pipelines
    SET data = jsonb_set(pipelines.data, ''{next_pipeline_id}'', (''"'' || next_pipeline.id || ''"'')::jsonb)
    FROM next_pipeline
    WHERE pipelines.id = $1.id;

    INSERT INTO app.pipe_processes (pipeline_id, initial_accumulator) VALUES ($1.id, (''{"url":"'' || ($1.data->>''root_sitemap_url'') || ''"}'')::jsonb);
    SELECT app.pipeline_call($1.id);
  ',
  'sql',
  'SELECT app.pipeline_call(($1.data->>''next_pipeline_id'')::uuid);',
  '<%= dataset_id %>',
  '[
    {
      "type": "Fetcher",
      "http": {
        "headers": {
          "user_agent": "<%= user_agent %>"
        }
      },
      "script": {
        "type":        "ruby",
        "source_code": <%= root_sitemap_fetcher %>
      }
    },
    {
      "type": "Demux"
    }
  ]'
FROM sitemap_template;
