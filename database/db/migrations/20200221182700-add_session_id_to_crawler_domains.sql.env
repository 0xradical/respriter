BEGIN;

CREATE OR REPLACE FUNCTION triggers.api_crawler_domains_view_instead_of_insert() RETURNS trigger AS $$
DECLARE
  crawler_domain RECORD;
  crawler RECORD;
  current_user_id bigint;
  log_session_id text;
BEGIN
  current_user_id := current_setting('request.jwt.claim.sub', true)::bigint;
  log_session_id := current_setting('request.header.sessionid', true)::text;

  IF if_admin(TRUE) THEN
    INSERT INTO app.crawler_domains (
      provider_crawler_id,
      authority_confirmation_status,
      domain
    ) VALUES (
      NEW.provider_crawler_id,
      COALESCE(NEW.authority_confirmation_status, 'unconfirmed'),
      NEW.domain
    ) RETURNING * INTO crawler_domain;

    RETURN crawler_domain;
  END IF;

  SELECT app.provider_crawlers.* FROM app.crawler_domains
  INNER JOIN app.provider_crawlers ON app.provider_crawlers.id = app.crawler_domains.provider_crawler_id
  WHERE app.crawler_domains.domain = NEW.domain AND app.provider_crawlers.status != 'deleted'
  LIMIT 1 INTO crawler;

  -- check for existing domains
  IF crawler IS NOT NULL THEN
    -- if there's one already for another user
    IF current_user_id != ALL(COALESCE(crawler.user_account_ids, ARRAY[]::int[])) THEN
      RAISE insufficient_privilege
        USING DETAIL = 'error', HINT = 'already_validated';
    -- if there's one already for me
    ELSE
      SELECT app.crawler_domains.* FROM app.crawler_domains
      WHERE app.crawler_domains.domain = NEW.domain
      LIMIT 1 INTO crawler_domain;

      RETURN crawler_domain;
    END IF;
  ELSE
    INSERT INTO app.crawler_domains (
      domain
    ) VALUES (
      NEW.domain
    ) ON CONFLICT ( domain ) DO UPDATE SET authority_confirmation_status = 'unconfirmed'
    RETURNING * INTO crawler_domain;

    IF crawler_domain.id IS NULL THEN
      SELECT * FROM app.crawler_domains
      WHERE app.crawler_domains.domain = NEW.domain
      LIMIT 1 INTO crawler_domain;
    END IF;

    INSERT INTO public.que_jobs
      (queue, priority, run_at, job_class, args, data)
      VALUES
      (
        'default',
        100,
        NOW(),
        'Developers::DomainAuthorityVerificationJob',
        ('["' || crawler_domain.id || '","' || current_user_id  ||  '","' || log_session_id || '"]')::jsonb,
        '{}'::jsonb
      );

    RETURN crawler_domain;
  END IF;
END;
$$ SECURITY DEFINER LANGUAGE plpgsql;

INSERT INTO public.schema_migrations (version) VALUES ('20200221182700');

COMMIT;