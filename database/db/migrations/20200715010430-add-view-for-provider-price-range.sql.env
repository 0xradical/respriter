BEGIN;

CREATE OR REPLACE FUNCTION app.currency_index(currency varchar)
RETURNS BIGINT AS $$
BEGIN
  CASE
  WHEN currency = 'USD' THEN
    RETURN 0;
  WHEN currency = 'EUR' THEN
    RETURN 1;
  WHEN currency = 'GPB' THEN
    RETURN 2;
  WHEN currency = 'BRL' THEN
    RETURN 3;
  ELSE
    RETURN 4;
  END CASE;
END;
$$ LANGUAGE plpgsql STRICT IMMUTABLE;

CREATE OR REPLACE FUNCTION app.price_in_decimal(price text)
  RETURNS DECIMAL AS
$$
BEGIN
   IF $1 = '' THEN  -- special case for empty string like requested
      RETURN 0::DECIMAL(12,2);
   ELSE
      RETURN $1::DECIMAL(12,2);
   END IF;

EXCEPTION WHEN OTHERS THEN
   RETURN NULL;  -- NULL for other invalid input

END
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE MATERIALIZED VIEW app.provider_price_ranges AS (
  SELECT provider_id,
         MIN(app.price_in_decimal(price)),
         MAX(app.price_in_decimal(price))
    FROM (
      SELECT DISTINCT ON (id)
             provider_id,
             MIN(CASE WHEN TYPE = 'single_course' THEN price ELSE total_price END) AS price
        FROM (
          SELECT id,
                provider_id,
                jsonb_array_elements(pricing_models)->>'type' AS type,
                jsonb_array_elements(pricing_models)->>'price' AS price,
                jsonb_array_elements(pricing_models)->>'total_price' AS total_price,
                app.currency_index(jsonb_array_elements(pricing_models)->>'currency'::VARCHAR) AS currency
            FROM app.courses
            WHERE published = 't'
        ) sq
        GROUP BY id, provider_id, currency
    ) sq2 GROUP BY provider_id
);

INSERT INTO public.schema_migrations (version) VALUES ('20200715010430');

COMMIT;
