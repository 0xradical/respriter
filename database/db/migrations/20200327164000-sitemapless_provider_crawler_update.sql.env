BEGIN;

CREATE OR REPLACE FUNCTION triggers.api_provider_crawlers_view_instead_of_update() RETURNS trigger AS $$
DECLARE
  new_record RECORD;
  sitemap app.sitemap;
  user_id bigint;
  user_role varchar;
BEGIN
  user_id := current_setting('request.jwt.claim.sub', true)::bigint;
  user_role := current_setting('request.jwt.claim.role', true)::varchar;

  IF ARRAY_LENGTH(NEW.sitemaps, 1) > 0 AND NEW.sitemaps[1].id IS NOT NULL AND (
    OLD.sitemaps[1].id IS NULL OR
    OLD.sitemaps[1].id <> NEW.sitemaps[1].id
  ) THEN
    sitemap :=
      ( '(' || NEW.sitemaps[1].id  ||  ','
            || 'unverified'    ||  ','
            || NEW.sitemaps[1].url ||  ','
            || 'unknown'       ||  ')'
      )::app.sitemap;
  END IF;

  IF user_role = 'user' AND user_id = ANY(OLD.user_account_ids) THEN
    IF sitemap.id IS NOT NULL THEN
      UPDATE app.provider_crawlers
      SET
        user_account_ids = NEW.user_account_ids,
        sitemaps         = ARRAY[sitemap]::app.sitemap[]
      WHERE
        id = OLD.id
      RETURNING * INTO new_record;

      INSERT INTO public.que_jobs
        (queue, priority, run_at, job_class, args, data)
        VALUES
        (
          'default',
          100,
          NOW(),
          'Developers::SitemapVerificationJob',
          ('["' || OLD.id || '","' || sitemap.id  || '"]')::jsonb,
          '{}'::jsonb
        );
    ELSE
      UPDATE app.provider_crawlers
      SET
        user_account_ids = NEW.user_account_ids,
        urls             = NEW.urls
      WHERE
        id = OLD.id
      RETURNING * INTO new_record;

      INSERT INTO public.que_jobs
        (queue, priority, run_at, job_class, args, data)
        VALUES
        (
          'default',
          100,
          NOW(),
          'Developers::ProviderCrawlerSetupJob',
          ('["' || OLD.id || '"]')::jsonb,
          '{}'::jsonb
        );
    END IF;

    RETURN new_record;
  END IF;

  IF user_role = 'admin' THEN
    UPDATE app.provider_crawlers
    SET
      user_agent_token = NEW.user_agent_token,
      provider_id      = NEW.provider_id,
      published        = NEW.published,
      status           = NEW.status,
      user_account_ids = NEW.user_account_ids,
      sitemaps         = NEW.sitemaps,
      urls             = NEW.urls
    WHERE
      id = OLD.id
    RETURNING * INTO new_record;

    RETURN new_record;
  END IF;

  RAISE insufficient_privilege;
END;
$$ SECURITY DEFINER LANGUAGE plpgsql;

INSERT INTO public.schema_migrations (version) VALUES ('20200327164000');

COMMIT;