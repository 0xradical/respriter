BEGIN;

CREATE TABLE app.slug_histories (
  id         uuid        DEFAULT public.uuid_generate_v4() PRIMARY KEY,
  course_id  uuid        REFERENCES app.courses(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT NOW() NOT NULL,
  updated_at timestamptz DEFAULT NOW() NOT NULL,
  slug       varchar                   NOT NULL
);

CREATE FUNCTION triggers.course_keep_slug() RETURNS trigger AS $$
BEGIN
  IF (NEW.published = false) THEN
    RETURN NEW;
  END IF;

  INSERT INTO app.slug_histories (
    course_id, slug
  ) VALUES (
    NEW.id, NEW.slug
  ) ON CONFLICT DO NOTHING;

  RETURN NEW;
END
$$ SECURITY DEFINER LANGUAGE plpgsql;

CREATE UNIQUE INDEX index_slug_histories_on_course_id_and_slug
ON app.slug_histories
USING btree (course_id, slug);

CREATE TRIGGER track_updated_at
  BEFORE UPDATE
  ON app.slug_histories
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.track_updated_at();

CREATE TRIGGER course_keep_slug
  AFTER INSERT OR UPDATE
  ON app.courses
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.course_keep_slug();

INSERT INTO public.schema_migrations (version) VALUES ('20200203120812');

COMMIT;
