BEGIN;

ALTER TABLE app.enrollments ADD COLUMN provider_id uuid REFERENCES app.providers(id);

CREATE FUNCTION triggers.check_course_provider_relationship() RETURNS trigger AS $$
BEGIN
  IF (NEW.course_id IS NOT NULL) THEN
    IF (NEW.provider_id IS NOT NULL) THEN
      IF (SELECT provider_id FROM app.courses WHERE id = NEW.course_id) <> NEW.provider_id THEN
        RAISE EXCEPTION 'update failed' USING DETAIL = 'course_provider__do_not_match', HINT = json_build_object('course_id', NEW.course_id, 'provider_id', NEW.provider_id);
      END IF;
    ELSE
      NEW.provider_id := (SELECT provider_id FROM app.courses WHERE id = NEW.course_id);
    END IF;
  END IF;

  RETURN NEW;
END
$$ SECURITY DEFINER LANGUAGE plpgsql;

CREATE TRIGGER check_course_provider_relationship
  BEFORE INSERT OR UPDATE
  ON app.enrollments
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.check_course_provider_relationship();

CREATE INDEX index_enrollments_on_provider_id
ON app.enrollments
USING btree (provider_id);

UPDATE app.enrollments SET provider_id = app.courses.provider_id
FROM app.courses
WHERE app.enrollments.course_id IS NOT NULL AND app.enrollments.course_id = app.courses.id;

INSERT INTO public.schema_migrations (version) VALUES ('20200708161246');

COMMIT;
