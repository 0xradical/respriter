BEGIN;
 
CREATE TABLE app.subscriptions (
  id              uuid        DEFAULT public.uuid_generate_v4() UNIQUE NOT NULL PRIMARY KEY,
  digest          boolean     DEFAULT true NOT NULL,
  newsletter      boolean     DEFAULT true NOT NULL,
  promotions      boolean     DEFAULT true NOT NULL,
  recommendations boolean     DEFAULT true NOT NULL,
  reports         boolean     DEFAULT true NOT NULL,
  unsubscribe_reasons jsonb   DEFAULT '{}'::jsonb,
  unsubscribed_at timestamptz,
  profile_id      uuid        REFERENCES app.profiles(id)
);

CREATE INDEX index_subscriptions_on_profiles_id
ON app.subscriptions
USING btree (profile_id);

CREATE OR REPLACE FUNCTION triggers.create_subscription() RETURNS trigger AS $$
BEGIN
  INSERT INTO app.subscriptions (profile_id) VALUES (NEW.id); 
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER create_profiles_subscription
  AFTER INSERT
  ON app.profiles
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.create_subscription();

SET session_replication_role = replica;
DO $$
DECLARE subid uuid;
DECLARE prof record;
BEGIN
  FOR prof IN SELECT id 
              FROM app.profiles 
  LOOP
    SELECT uuid_generate_v4() INTO subid;
    INSERT INTO app.subscriptions (id, profile_id) VALUES (subid, prof.id); 
  END LOOP;
END $$;
SET session_replication_role = DEFAULT;

INSERT INTO public.schema_migrations (version) VALUES ('20200513185742');

COMMIT;
