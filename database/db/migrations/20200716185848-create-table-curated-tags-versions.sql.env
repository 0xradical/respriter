BEGIN;


CREATE TABLE app.curated_tags_versions (
  id                                      uuid                    DEFAULT public.uuid_generate_v4() PRIMARY KEY,
  course_id                               uuid                    REFERENCES app.courses(id),
  curated_tags                            varchar[]               DEFAULT '{}'::varchar[],
  excluded_tags                           varchar[]               DEFAULT '{}'::varchar[],
  created_at                              timestamptz             DEFAULT NOW() NOT NULL,
  updated_at                              timestamptz             DEFAULT NOW() NOT NULL,
  current                                 boolean                 DEFAULT false,
  author                                  varchar
);

CREATE INDEX index_curated_tags_versions_on_course_id
ON app.curated_tags_versions
USING btree (course_id);

CREATE INDEX index_curated_tags_versions_on_curated_tags
ON app.curated_tags_versions
USING gin (curated_tags);

INSERT INTO app.curated_tags_versions(course_id, curated_tags, current, author)
SELECT id, curated_tags, 'true', 'legacy'
FROM app.courses;

DROP INDEX app.index_courses_on_curated_tags;

DROP MATERIALIZED VIEW app.provider_stats;

ALTER TABLE app.courses
RENAME COLUMN curated_tags to old_curated_tags;

CREATE MATERIALIZED VIEW app.provider_stats AS (
  WITH top_countries AS (
    SELECT provider_id, (ARRAY_AGG(country))[1:5] AS countries FROM (
      SELECT provider_id, tracking_data->>'country' AS country, count(*) AS count_all
        FROM app.enrollments
        WHERE tracking_data->>'country' IS NOT NULL
        GROUP BY provider_id, country
        ORDER BY count_all DESC
    ) sq
    GROUP BY provider_id
  ),
  areas_of_knowledge AS (
    SELECT DISTINCT ON (provider_id) provider_id, tag, count(*) AS count_all
    FROM (
      SELECT provider_id, UNNEST(curated_tags) AS tag
      FROM app.courses
      INNER JOIN app.curated_tags_versions ON curated_tags_versions.course_id = courses.id
      WHERE app.courses.published = true AND curated_tags_versions.current = true
    ) sq
    WHERE tag IN (
      'computer_science',
      'arts_and_design',
      'business',
      'personal_development',
      'data_science',
      'physical_science_and_engineering',
      'marketing',
      'language_and_communication',
      'life_sciences',
      'math_and_logic',
      'social_sciences',
      'health_and_fitness'
    )
    GROUP BY provider_id, tag
    ORDER BY provider_id, count_all DESC
  ),
  indexed_courses AS (
    SELECT provider_id, count(*) AS count_all
    FROM app.courses
    WHERE published = true
    GROUP BY provider_id
  ),
  instructors AS (
    SELECT (SELECT id FROM app.providers WHERE name = teaching_at) AS provider_id, COUNT(*) AS count_all
    FROM (
      SELECT id, UNNEST(teaching_at) AS teaching_at
      FROM app.orphaned_profiles
      WHERE orphaned_profiles.state = 'enabled'
    ) sq
    GROUP BY provider_id
  )
  SELECT app.providers.id AS provider_id,
         top_countries.countries AS top_countries,
         areas_of_knowledge.tag AS areas_of_knowledge,
         indexed_courses.count_all AS indexed_courses,
         instructors.count_all AS instructors
    FROM app.providers
    LEFT JOIN top_countries ON top_countries.provider_id = app.providers.id
    LEFT JOIN areas_of_knowledge ON areas_of_knowledge.provider_id = app.providers.id
    LEFT JOIN indexed_courses ON indexed_courses.provider_id = app.providers.id
    LEFT JOIN instructors ON instructors.provider_id = app.providers.id
    WHERE top_countries IS NOT NULL
       OR areas_of_knowledge IS NOT NULL
       OR indexed_courses IS NOT NULL
       OR instructors IS NOT NULL
);

INSERT INTO public.schema_migrations (version) VALUES ('20200716185848');

COMMIT;
