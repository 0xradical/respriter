BEGIN;

CREATE EXTENSION IF NOT EXISTS unaccent    WITH SCHEMA public;

CREATE OR REPLACE FUNCTION app.slugify(value varchar)
RETURNS TEXT AS $$
  WITH unaccented AS (
    SELECT unaccent(value) AS value
  ),

  lowercase AS (
    SELECT lower(value) AS value
    FROM unaccented
  ),

  hyphenated AS (
    SELECT regexp_replace(value, '[^a-z0-9\\-_]+', '-', 'gi') AS value
    FROM lowercase
  ),

  trimmed AS (
    SELECT regexp_replace(regexp_replace(value, '\\-+$', ''), '^\\-', '') AS value
    FROM hyphenated
  )

  SELECT value FROM trimmed;
$$ LANGUAGE SQL STRICT IMMUTABLE;

CREATE TRIGGER track_updated_at
  BEFORE UPDATE
  ON app.crawler_domains
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.track_updated_at();

CREATE TRIGGER track_updated_at
  BEFORE UPDATE
  ON app.crawling_events
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.track_updated_at();

CREATE TRIGGER track_updated_at
  BEFORE UPDATE
  ON app.preview_courses
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.track_updated_at();

CREATE OR REPLACE VIEW api.providers AS
  SELECT *
  FROM app.providers AS provider
  WHERE
    (
      current_user = 'user'
      AND EXISTS (
        SELECT 1
        FROM app.provider_crawlers AS crawler
        WHERE
          crawler.status != 'deleted'
          AND crawler.provider_id = provider.id
          AND if_user_by_ids(crawler.user_account_ids, TRUE)
      )
    ) OR current_user = 'admin';

CREATE OR REPLACE FUNCTION triggers.api_providers_view_instead_of_update() RETURNS trigger AS $$
DECLARE
  new_record RECORD;
BEGIN
  IF current_user = 'user' THEN
    UPDATE app.providers
    SET
      name                 = NEW.name,
      description          = NEW.description,
      slug                 = COALESCE(OLD.slug, app.slugify(NEW.slug), app.slugify(NEW.name)),
      afn_url_template     = NEW.afn_url_template,
      published            = NEW.published,
      published_at         = NEW.published_at,
      encoded_deep_linking = NEW.encoded_deep_linking
    WHERE
      id = OLD.id
      AND EXISTS (
        SELECT 1
        FROM app.provider_crawlers AS crawler
        WHERE
          crawler.status != 'deleted'
          AND if_user_by_ids(crawler.user_account_ids, TRUE)
          AND crawler.provider_id = app.providers.id
      )
    RETURNING * INTO new_record;

    RETURN new_record;
  END IF;

  IF if_admin(TRUE) THEN
    UPDATE app.providers
    SET
      name                 = NEW.name,
      description          = NEW.description,
      slug                 = NEW.slug,
      afn_url_template     = NEW.afn_url_template,
      published            = NEW.published,
      published_at         = NEW.published_at,
      encoded_deep_linking = NEW.encoded_deep_linking
    WHERE
      id = OLD.id
    RETURNING * INTO new_record;

    RETURN new_record;
  END IF;

  RAISE insufficient_privilege;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER api_providers_view_instead_of_update
  INSTEAD OF UPDATE
  ON api.providers
  FOR EACH ROW
    EXECUTE PROCEDURE triggers.api_providers_view_instead_of_update();

GRANT SELECT, INSERT, UPDATE,         REFERENCES ON app.course_reviews     TO "user";
GRANT SELECT, INSERT, UPDATE,         REFERENCES ON app.crawler_domains    TO "user";
GRANT SELECT                                     ON app.crawling_events    TO "user";
GRANT SELECT, INSERT,         DELETE             ON app.preview_courses    TO "user";
GRANT SELECT,         UPDATE                     ON app.profiles           TO "user";
GRANT SELECT, INSERT, UPDATE,         REFERENCES ON app.providers          TO "user";
GRANT SELECT, INSERT, UPDATE,         REFERENCES ON app.provider_crawlers  TO "user";
GRANT SELECT,         UPDATE,         REFERENCES ON app.user_accounts      TO "user";
GRANT SELECT,         UPDATE                     ON api.profiles           TO "user";
GRANT SELECT,         UPDATE                     ON api.providers          TO "user";
GRANT SELECT,         UPDATE                     ON api.user_accounts      TO "user";
GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON app.course_reviews     TO "admin";
GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON app.crawler_domains    TO "admin";
GRANT SELECT                                     ON app.crawling_events    TO "admin";
GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON app.preview_courses    TO "admin";
GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON app.promo_accounts     TO "admin";
GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES ON app.promo_account_logs TO "admin";
GRANT SELECT, INSERT, UPDATE,         REFERENCES ON app.providers          TO "admin";
GRANT SELECT, INSERT, UPDATE,         REFERENCES ON app.provider_crawlers  TO "admin";
GRANT SELECT                                     ON api.earnings           TO "admin";
GRANT SELECT, INSERT, UPDATE                     ON api.providers          TO "admin";
GRANT SELECT,         UPDATE, DELETE             ON api.user_accounts      TO "admin";

INSERT INTO public.schema_migrations (version) VALUES ('20191108115021');

COMMIT;
