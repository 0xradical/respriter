BEGIN;

ALTER TABLE app.course_pricings ALTER COLUMN plan_type     SET DEFAULT 'regular';
ALTER TABLE app.course_pricings ALTER COLUMN customer_type SET DEFAULT 'individual';
ALTER TABLE app.course_pricings ALTER COLUMN customer_type SET NOT NULL;

-- +  plan_type                  app.pricing_plan      NOT NULL DEFAULT 'regular',
-- +  customer_type              app.pricing_customer  NOT NULL DEFAULT 'individual',

CREATE OR REPLACE FUNCTION app.insert_into_course_pricings(cid uuid, pricing jsonb)
RETURNS void AS $$
BEGIN
  INSERT INTO app.course_pricings (
          course_id,
          pricing_type,
          plan_type,
          customer_type,
          price,
          total_price,
          discount,
          currency,
          payment_period_unit,
          payment_period_value,
          trial_period_unit,
          trial_period_value,
          subscription_period_unit,
          subscription_period_value
        ) VALUES (
          cid,
          (pricing->>'type')::app.pricing,
          COALESCE(pricing->>'plan_type', 'regular')::app.pricing_plan,
          COALESCE(pricing->>'customer_type', 'individual')::app.pricing_customer,
          (pricing->>'price')::numeric(8,2),
          (pricing->>'total_price')::numeric(8,2),
          (pricing->>'discount')::numeric(8,2),
          (pricing->>'currency')::app.iso4217_code,
          (pricing->'payment_period'->>'unit')::app.period_unit,
          (pricing->'payment_period'->>'value')::integer,
          (pricing->'trial_period'->>'unit')::app.period_unit,
          (pricing->'trial_period'->>'value')::integer,
          (pricing->'subscription_period'->>'unit')::app.period_unit,
          (pricing->'subscription_period'->>'value')::integer
        ) ON CONFLICT (
                       course_id,
                       pricing_type,
                       plan_type,
                       COALESCE(customer_type, 'unknown'),
                       currency,
                       COALESCE(payment_period_unit, 'unknown'),
                       COALESCE(subscription_period_unit, 'unknown'),
                       COALESCE(trial_period_unit, 'unknown')
                      )
          DO UPDATE SET pricing_type = (pricing->>'type')::app.pricing,
                        plan_type = (pricing->>'plan_type')::app.pricing_plan,
                        customer_type = (pricing->>'customer_type')::app.pricing_customer,
                        price = (pricing->>'price')::numeric(8,2),
                        total_price = (pricing->>'total_price')::numeric(8,2),
                        discount = (pricing->>'discount')::numeric(8,2),
                        currency = (pricing->>'currency')::app.iso4217_code,
                        payment_period_unit = (pricing->'payment_period'->>'unit')::app.period_unit,
                        payment_period_value = (pricing->'payment_period'->>'value')::integer,
                        trial_period_unit = (pricing->'trial_period'->>'unit')::app.period_unit,
                        trial_period_value = (pricing->'trial_period'->>'value')::integer,
                        subscription_period_unit = (pricing->'subscription_period'->>'unit')::app.period_unit,
                        subscription_period_value = (pricing->'subscription_period'->>'value')::integer;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION app.insert_into_preview_course_pricings(pcid uuid, pricing jsonb)
RETURNS void AS $$
BEGIN
  INSERT INTO app.preview_course_pricings (
          preview_course_id,
          pricing_type,
          plan_type,
          customer_type,
          price,
          total_price,
          discount,
          currency,
          payment_period_unit,
          payment_period_value,
          trial_period_unit,
          trial_period_value,
          subscription_period_unit,
          subscription_period_value
        ) VALUES (
          pcid,
          (pricing->>'type')::app.pricing,
          COALESCE(pricing->>'plan_type', 'regular')::app.pricing_plan,
          COALESCE(pricing->>'customer_type', 'individual')::app.pricing_customer,
          (pricing->>'price')::numeric(8,2),
          (pricing->>'total_price')::numeric(8,2),
          (pricing->>'discount')::numeric(8,2),
          (pricing->>'currency')::app.iso4217_code,
          (pricing->'payment_period'->>'unit')::app.period_unit,
          (pricing->'payment_period'->>'value')::integer,
          (pricing->'trial_period'->>'unit')::app.period_unit,
          (pricing->'trial_period'->>'value')::integer,
          (pricing->'subscription_period'->>'unit')::app.period_unit,
          (pricing->'subscription_period'->>'value')::integer
        ) ON CONFLICT (
                       preview_course_id,
                       pricing_type,
                       plan_type,
                       COALESCE(customer_type, 'unknown'),
                       currency,
                       COALESCE(payment_period_unit, 'unknown'),
                       COALESCE(subscription_period_unit, 'unknown'),
                       COALESCE(trial_period_unit, 'unknown')
                      )
          DO UPDATE SET pricing_type = (pricing->>'type')::app.pricing,
                        plan_type = (pricing->>'plan_type')::app.pricing_plan,
                        customer_type = (pricing->>'customer_type')::app.pricing_customer,
                        price = (pricing->>'price')::numeric(8,2),
                        total_price = (pricing->>'total_price')::numeric(8,2),
                        discount = (pricing->>'discount')::numeric(8,2),
                        currency = (pricing->>'currency')::app.iso4217_code,
                        payment_period_unit = (pricing->'payment_period'->>'unit')::app.period_unit,
                        payment_period_value = (pricing->'payment_period'->>'value')::integer,
                        trial_period_unit = (pricing->'trial_period'->>'unit')::app.period_unit,
                        trial_period_value = (pricing->'trial_period'->>'value')::integer,
                        subscription_period_unit = (pricing->'subscription_period'->>'unit')::app.period_unit,
                        subscription_period_value = (pricing->'subscription_period'->>'value')::integer;
END;
$$ LANGUAGE plpgsql;


INSERT INTO public.schema_migrations (version) VALUES ('20200818054601');

COMMIT;
